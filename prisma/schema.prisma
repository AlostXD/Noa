generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                 String           @id
  nome               String
  email              String           @unique
  cpf                String           @unique
  criadoEm           DateTime         @default(now())
  atualizadoEm       DateTime         @updatedAt
  date               String
  endereco           String
  tipo               String?
  Feedback           Feedback[]
  user               User             @relation(fields: [id], references: [id])
  UsuarioUnidade     UsuarioUnidade[]
  Admin              Admin[]
  condominiosCriados Condominio[]     @relation("CriadorRelation")

  @@map("usuario")
}

model Admin {
  id           String @id @default(uuid())
  usuarioId    String
  condominioId String

  usuario    Usuario    @relation(fields: [usuarioId], references: [id])
  condominio Condominio @relation(fields: [condominioId], references: [id])

  criadoEm DateTime @default(now())

  @@unique([usuarioId, condominioId]) // Evita duplicações
}

model UsuarioUnidade {
  id        String       @id @default(uuid())
  usuarioId String
  unidadeId String
  papel     PapelUnidade
  criadoEm  DateTime     @default(now())

  usuario Usuario @relation(fields: [usuarioId], references: [id])
  unidade Unidade @relation(fields: [unidadeId], references: [id])

  @@unique([usuarioId, unidadeId, papel]) // Evita duplicação do mesmo papel na mesma unidade
}

enum PapelUnidade {
  MORADOR
  OPERADOR
  ADMIN
}

model Condominio {
  id          String       @id @default(uuid())
  nome        String
  endereco    String
  criadoEm    DateTime     @default(now())
  criadorId   String
  feedbacks   Feedback[]
  manutencoes Manutencao[]
  Pagamento   Pagamento[]
  unidades    Unidade[]
  Admin       Admin[]
  Usuario     Usuario      @relation("CriadorRelation", fields: [criadorId], references: [id])

  @@map("condominio")
}

model Unidade {
  id           String           @id @default(uuid())
  numero       String
  descricao    String
  status       UnidadeStatus
  pagamentos   Pagamento[] // Relacionamento com pagamentos
  condominioId String
  condominio   Condominio       @relation(fields: [condominioId], references: [id])
  moradores    UsuarioUnidade[]

  @@map("unidade")
}

model Pagamento {
  id             String          @id @default(uuid())
  valor          Float
  status         PagamentoStatus
  dataVencimento DateTime
  condominioId   String
  condominio     Condominio      @relation(fields: [condominioId], references: [id])
  unidadeId      String? // Campo opcional para associar a uma unidade
  unidade        Unidade?        @relation(fields: [unidadeId], references: [id])

  @@map("pagamento")
}

model Manutencao {
  id           String           @id @default(uuid())
  descricao    String
  data         DateTime         @default(now())
  status       ManutencaoStatus
  condominioId String
  condominio   Condominio       @relation(fields: [condominioId], references: [id])

  @@map("manutencao")
}

model Feedback {
  id           String     @id @default(uuid())
  mensagem     String
  criadoEm     DateTime   @default(now())
  usuarioId    String
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  usuario      Usuario    @relation(fields: [usuarioId], references: [id])

  @@map("feedback")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]
  Usuario       Usuario?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum UsuarioTipo {
  ADMIN
  MORADOR
  SINDICO
}

enum UnidadeStatus {
  DISPONIVEL
  OCUPADO
}

enum PagamentoStatus {
  PENDENTE
  PAGO
  ATRASADO
}

enum ManutencaoStatus {
  PENDENTE
  CONCLUIDO
}
