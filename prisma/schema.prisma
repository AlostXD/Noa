generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           String      @id
  nome         String
  email        String      @unique
  cpf          String      @unique
  tipo         UsuarioTipo
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @updatedAt
  condominioId String?
  unidadeId    String?
  date         String
  endereco     String
  Feedback     Feedback[]
  Condominio   Condominio? @relation(fields: [condominioId], references: [id])
  user         User        @relation(fields: [id], references: [id])
  Unidade      Unidade?    @relation(fields: [unidadeId], references: [id])

  @@map("usuario")
}

model Condominio {
  id          String       @id @default(uuid())
  nome        String
  endereco    String
  criadoEm    DateTime     @default(now())
  feedbacks   Feedback[]
  manutencoes Manutencao[]
  pagamentos  Pagamento[]
  unidades    Unidade[]
  Usuario     Usuario[]
}

model Unidade {
  id           String        @id @default(uuid())
  numero       String
  status       UnidadeStatus
  condominioId String
  condominio   Condominio    @relation(fields: [condominioId], references: [id])
  moradores    Usuario[]
}

model Pagamento {
  id             String          @id @default(uuid())
  valor          Float
  status         PagamentoStatus
  dataVencimento DateTime
  condominioId   String
  condominio     Condominio      @relation(fields: [condominioId], references: [id])
}

model Manutencao {
  id           String           @id @default(uuid())
  descricao    String
  data         DateTime         @default(now())
  status       ManutencaoStatus
  condominioId String
  condominio   Condominio       @relation(fields: [condominioId], references: [id])
}

model Feedback {
  id           String     @id @default(uuid())
  mensagem     String
  criadoEm     DateTime   @default(now())
  usuarioId    String
  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id])
  usuario      Usuario    @relation(fields: [usuarioId], references: [id])
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]
  Usuario       Usuario?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum UsuarioTipo {
  ADMIN
  MORADOR
  SINDICO
}

enum UnidadeStatus {
  DISPONIVEL
  OCUPADO
}

enum PagamentoStatus {
  PENDENTE
  PAGO
  ATRASADO
}

enum ManutencaoStatus {
  PENDENTE
  CONCLUIDO
}
